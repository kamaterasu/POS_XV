"use client";
import { useMemo, useState, useEffect } from "react";
import { Item } from "@/lib/sales/salesTypes";
import { FiHeart } from "react-icons/fi";
import { FaShoppingCart } from "react-icons/fa";
import Image from "next/image";
import { getProductByStore } from "@/lib/product/productApi";
import { getAccessToken } from "@/lib/helper/getAccessToken";
import { getStoredID } from "@/lib/store/storeApi";
import { getImageShowUrl } from "@/lib/product/productImages";
import { getCategories } from "@/lib/category/categoryApi";
import { getProductByCategory } from "@/lib/product/productApi";

type Category = {
  id: string;
  name: string;
  children?: Category[];
};

type Variant = {
  variant_id: string; // Made required since we need real IDs
  color?: string;
  size?: string;
  stock: number;
  price: number;
  name?: string; // Add name for variant
  sku?: string; // Add SKU
  attrs?: Record<string, string>; // Add attributes
};
type Product = {
  id: string;
  name: string;
  img?: string;
  rawImg?: string; // Add rawImg property for image URL resolution
  category?: string; // Add category
  categoryId?: string; // Add category ID
  variants: Variant[];
};

// ---------- Image URL resolver ----------
const imgUrlCache = new Map<string, string>();
async function resolveImageUrl(raw?: string): Promise<string | undefined> {
  if (!raw) return undefined;
  if (/^https?:\/\//i.test(raw) || /^data:/i.test(raw)) return raw;
  if (raw.startsWith("/")) return raw;
  const path = raw.includes("/") ? raw : `product_img/${raw}`;
  if (imgUrlCache.has(path)) return imgUrlCache.get(path)!;
  try {
    const signed = await getImageShowUrl(path);
    imgUrlCache.set(path, signed);
    return signed;
  } catch (e) {
    console.error("Failed to sign image url for", path, e);
    return undefined;
  }
}

// Category Tree Components (similar to inventory page)
function CategoryNode({
  node,
  onSelect,
  selectedId,
}: {
  node: Category;
  onSelect: (n: Category) => void;
  selectedId?: string | null;
}) {
  const [open, setOpen] = useState(false);
  const hasChildren = Array.isArray(node?.children) && node.children.length > 0;
  const selected = selectedId === node?.id;

  return (
    <li>
      <div className="flex items-center gap-2 text-sm py-1.5">
        {hasChildren ? (
          <button
            type="button"
            onClick={() => setOpen((v) => !v)}
            className="inline-flex w-6 h-6 justify-center items-center select-none text-gray-500 hover:text-blue-600 hover:bg-blue-50 rounded-md transition-all duration-200"
            aria-label={open ? "Collapse" : "Expand"}
            aria-expanded={open}
          >
            <svg
              className={`w-3 h-3 transition-transform duration-200 ${
                open ? "rotate-90" : ""
              }`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M9 5l7 7-7 7"
              />
            </svg>
          </button>
        ) : (
          <div className="w-6 h-6 flex items-center justify-center">
            <div className="w-1.5 h-1.5 rounded-full bg-gray-300" />
          </div>
        )}
        <button
          type="button"
          onClick={() => {
            onSelect(node);
          }}
          className={`flex-1 text-left px-2 py-1.5 rounded-lg transition-all duration-200 text-sm ${
            selected
              ? "bg-blue-100 text-blue-700 font-medium shadow-sm border border-blue-200"
              : "hover:bg-white hover:text-blue-600 text-gray-700"
          }`}
          title="–≠–Ω—ç –∞–Ω–≥–∏–ª–ª–∞–∞—Ä —à“Ø“Ø—Ö"
        >
          <span className="flex items-center gap-2">
            {selected && (
              <svg
                className="w-3 h-3 text-blue-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M5 13l4 4L19 7"
                />
              </svg>
            )}
            {node?.name}
          </span>
        </button>
      </div>

      {hasChildren && open && (
        <ul className="pl-4 ml-3 border-l-2 border-blue-100 space-y-0.5 mt-1">
          {node.children!.map((child: Category) => (
            <CategoryNode
              key={child.id}
              node={child}
              onSelect={onSelect}
              selectedId={selectedId}
            />
          ))}
        </ul>
      )}
    </li>
  );
}

function CategoryTree({
  nodes,
  onSelect,
  selectedId,
}: {
  nodes: Category[];
  onSelect: (n: Category) => void;
  selectedId?: string | null;
}) {
  if (!nodes?.length) return null;
  return (
    <ul className="space-y-1">
      {nodes.map((n: Category) => (
        <CategoryNode
          key={n.id}
          node={n}
          onSelect={onSelect}
          selectedId={selectedId}
        />
      ))}
    </ul>
  );
}

export default function AddItemModal({
  open,
  onClose,
  onAdd,
  storeId, // Add storeId prop from parent
}: {
  open: boolean;
  onClose: () => void;
  onAdd: (it: Item) => void;
  storeId?: string | null; // Add storeId prop type
}) {
  const [query, setQuery] = useState("");
  const [catalog, setCatalog] = useState<Product[]>([]);
  const [loading, setLoading] = useState(false);
  const [activeId, setActiveId] = useState<string | null>(null);
  const [categories, setCategories] = useState<Category[]>([]);
  const [selectedCat, setSelectedCat] = useState<{
    id: string;
    name: string;
  } | null>(null);

  // Fetch products when modal opens or storeId/category changes
  useEffect(() => {
    if (open) {
      console.log("üõí AddItemModal - Starting to load products...");
      setLoading(true);
      setCatalog([]); // Clear previous catalog
      // Don't clear categories here - they are loaded separately
      // Only reset category selection when modal first opens, not on category changes

      (async () => {
        try {
          console.log("üõí AddItemModal - Getting access token...");
          const token = await getAccessToken();
          if (!token) {
            console.error("üõí AddItemModal - No access token available");
            setCatalog([]);
            return;
          }
          console.log(
            "üõí AddItemModal - Token obtained:",
            token.substring(0, 20) + "..."
          );

          // Use the storeId passed from parent, fallback to getStoredID
          let effectiveStoreId = storeId;
          if (!effectiveStoreId) {
            console.log(
              "üõí AddItemModal - No storeId prop, getting from API..."
            );
            effectiveStoreId = await getStoredID(token);
          }

          if (!effectiveStoreId) {
            console.warn(
              "üõí AddItemModal - No store ID available, modal will show empty catalog"
            );
            setCatalog([]);
            return;
          }
          console.log("üõí AddItemModal - Using store ID:", effectiveStoreId);

          // Handle "all" stores vs specific store
          let response: any;

          // Always fetch inventory first (not category API)
          if (effectiveStoreId === "all") {
            console.log("üõí AddItemModal - Fetching from global inventory...");
            // Use global inventory for "all stores"
            const { jwtDecode } = await import("jwt-decode");
            const decoded: any = jwtDecode(token);
            const tenantId = decoded?.app_metadata?.tenants?.[0];

            const globalResponse = await fetch(
              `${
                process.env.NEXT_PUBLIC_SUPABASE_URL
              }/functions/v1/inventory?tenant_id=${encodeURIComponent(
                tenantId
              )}&scope=global&limit=500`,
              {
                headers: { Authorization: `Bearer ${token}` },
              }
            );

            if (globalResponse.ok) {
              response = await globalResponse.json();
            } else {
              throw new Error("Global inventory fetch failed");
            }
          } else {
            console.log("üõí AddItemModal - Fetching products by store...");
            response = await getProductByStore(token, effectiveStoreId);
          }

          console.log("üõí AddItemModal - Raw API response:", response);
          console.log(
            "üõí AddItemModal - Response items count:",
            response?.items?.length || 0
          );

          // Process inventory response to build product catalog
          if (response?.items && response.items.length > 0) {
            console.log("üõí AddItemModal - Processing inventory items...");
            const productMap = new Map<string, any>();

            // Group inventory items by product
            for (const item of response.items) {
              const product = item.product;
              const variant = item.variant;

              console.log("üõí Processing item:", {
                product: product?.name,
                variant: variant?.name,
                qty: item.qty,
              });

              if (!product?.id || !variant?.id) {
                console.warn(
                  "üõí Skipping item - missing product or variant ID:",
                  item
                );
                continue;
              }

              if (!productMap.has(product.id)) {
                const categoryName =
                  product.category?.name || product.category || "–ë—É—Å–∞–¥";
                const categoryId = product.category?.id || null;
                console.log("üõí Product category info:", {
                  productName: product.name,
                  categoryRaw: product.category,
                  categoryName: categoryName,
                  categoryId: categoryId,
                });

                productMap.set(product.id, {
                  id: product.id,
                  name: product.name,
                  img: product.img || "/default.png",
                  rawImg: product.img, // Store original path for URL resolution
                  category: categoryName, // Add category
                  categoryId: categoryId, // Add category ID
                  variants: [],
                });
              }

              // Add variant with stock from inventory
              productMap.get(product.id).variants.push({
                variant_id: variant.id,
                color:
                  variant.attrs?.color ||
                  variant.attrs?.Color ||
                  variant.attrs?.colorName ||
                  "Default",
                size:
                  variant.attrs?.size ||
                  variant.attrs?.Size ||
                  variant.attrs?.–•—ç–º–∂—ç—ç ||
                  "Default",
                stock: item.qty || 0, // Stock from inventory
                price: variant.price || 0,
                name: variant.name,
                sku: variant.sku,
                attrs: variant.attrs,
              });
            }

            const products: Product[] = Array.from(productMap.values());

            console.log("üõí AddItemModal - Product map size:", productMap.size);
            console.log("üõí AddItemModal - Resolving image URLs...");

            // Resolve image URLs for all products
            const productsWithUrls: Product[] = await Promise.all(
              products.map(async (product) => ({
                ...product,
                img: (await resolveImageUrl(product.rawImg)) || "/default.png",
              }))
            );

            console.log(
              "üõí AddItemModal - Processed products with resolved images:",
              productsWithUrls
            );
            console.log(
              "üõí AddItemModal - Total products:",
              productsWithUrls.length
            );

            productsWithUrls.forEach((p, i) => {
              console.log(
                `üõí Product ${i + 1}: ${p.name} (${
                  p.variants.length
                } variants) - Image: ${p.img}`
              );
              p.variants.forEach((v, j) => {
                console.log(
                  `  üõí Variant ${j + 1}: ${v.color}/${v.size} - Stock: ${
                    v.stock
                  }, Price: ${v.price}`
                );
              });
            });

            setCatalog(productsWithUrls);
            if (productsWithUrls.length > 0) {
              setActiveId(productsWithUrls[0].id);
              console.log(
                "üõí AddItemModal - Set active product:",
                productsWithUrls[0].name
              );
            }
          } else {
            console.warn(
              "üõí AddItemModal - No items in response or empty array"
            );
            console.log("üõí AddItemModal - Response:", response);
            setCatalog([]);
          }
        } catch (error) {
          console.error("üõí AddItemModal - Error fetching products:", error);
          setCatalog([]);
        } finally {
          console.log(
            "üõí AddItemModal - Finished loading, setting loading to false"
          );
          setLoading(false);
        }
      })();
    }
  }, [open, storeId]); // React to modal open and store changes, not category (category filtering is client-side)

  // Load categories when modal opens
  useEffect(() => {
    if (open) {
      // Reset category selection when modal first opens
      setSelectedCat(null);

      (async () => {
        try {
          const token = await getAccessToken();
          if (!token) return;

          const raw = await getCategories(token);
          const normalizeTree = (nodes: any[]): Category[] => {
            if (!Array.isArray(nodes)) return [];
            return nodes.map((node) => ({
              id: String(node.id),
              name: String(node.name || node.title || "Unknown"),
              children: node.children
                ? normalizeTree(node.children)
                : undefined,
            }));
          };

          const tree = Array.isArray(raw?.tree) ? raw.tree : [];
          const normalizedCategories = normalizeTree(tree);
          setCategories(normalizedCategories);
        } catch (error) {
          console.error("üõí AddItemModal - Error loading categories:", error);
          setCategories([]);
        }
      })();
    } else {
      // Clear categories when modal closes to save memory
      setCategories([]);
      setSelectedCat(null);
    }
  }, [open]);

  const active = useMemo(
    () => catalog.find((p) => p.id === activeId) ?? null,
    [catalog, activeId]
  );

  const colors = useMemo(
    () =>
      Array.from(
        new Set(
          (active?.variants ?? [])
            .map((v) => v.color)
            .filter((c): c is string => Boolean(c))
        )
      ),
    [active]
  );
  const sizes = useMemo(
    () =>
      Array.from(
        new Set(
          (active?.variants ?? [])
            .map((v) => v.size)
            .filter((s): s is string => Boolean(s))
        )
      ),
    [active]
  );

  const [selColor, setSelColor] = useState<string | null>(null);
  const [selSize, setSelSize] = useState<string | null>(null);
  const [qty, setQty] = useState<number>(1);

  const resetSelection = () => {
    setSelColor(null);
    setSelSize(null);
    setQty(1);
    // Don't reset category when selecting a product
  };
  const selectProduct = (id: string) => {
    setActiveId(id);
    resetSelection();
  };

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    let products = catalog;

    console.log("üõí AddItemModal - Filtering products:", {
      totalProducts: products.length,
      selectedCategory: selectedCat?.name,
      searchQuery: q,
      sampleProduct: products[0]
        ? {
            name: products[0].name,
            category: products[0].category,
          }
        : null,
    });

    // Filter by category if one is selected
    if (selectedCat?.id) {
      const beforeFilter = products.length;
      products = products.filter((p) => {
        // Check if product category matches selected category
        const productCategory = p.category;
        const productCategoryId = p.categoryId;

        // Try multiple matching strategies:
        // 1. Category ID match (most reliable)
        // 2. Exact name match
        // 3. Case-insensitive match
        // 4. Partial matches
        const matches =
          (productCategoryId &&
            selectedCat.id &&
            productCategoryId === selectedCat.id) ||
          productCategory === selectedCat.name ||
          (productCategory &&
            selectedCat.name &&
            productCategory.toLowerCase() === selectedCat.name.toLowerCase()) ||
          (productCategory &&
            selectedCat.name &&
            productCategory
              .toLowerCase()
              .includes(selectedCat.name.toLowerCase())) ||
          (productCategory &&
            selectedCat.name &&
            selectedCat.name
              .toLowerCase()
              .includes(productCategory.toLowerCase()));

        if (!matches) {
          console.log("üõí Category mismatch:", {
            productName: p.name,
            productCategory: productCategory,
            productCategoryId: productCategoryId,
            selectedCategory: selectedCat.name,
            selectedCategoryId: selectedCat.id,
            matches,
          });
        }

        return matches;
      });

      console.log("üõí Category filtering result:", {
        before: beforeFilter,
        after: products.length,
        selectedCategory: selectedCat.name,
      });
    }

    // Filter by search query
    if (q) {
      products = products.filter((p) => p.name.toLowerCase().includes(q));
    }

    return products;
  }, [catalog, query, selectedCat]);

  const selectedVariant: Variant | null = useMemo(() => {
    if (!active || !selColor || !selSize) return null;
    return (
      active.variants.find((v) => v.color === selColor && v.size === selSize) ??
      null
    );
  }, [active, selColor, selSize]);

  const remaining = selectedVariant?.stock ?? 0;
  const canAdd = !!active && !!selectedVariant && qty > 0 && qty <= remaining;

  const handleAdd = () => {
    if (!canAdd || !active || !selectedVariant) {
      console.warn("üõí Cannot add item:", {
        canAdd,
        active: !!active,
        selectedVariant: !!selectedVariant,
      });
      return;
    }

    console.log("üõí Adding item to cart:", {
      product: active.name,
      variant: selectedVariant.variant_id,
      color: selectedVariant.color,
      size: selectedVariant.size,
      qty,
      price: selectedVariant.price,
    });

    onAdd({
      id:
        crypto.randomUUID?.() ??
        `${active.id}-${selectedVariant.color}-${
          selectedVariant.size
        }-${Date.now()}`,
      variant_id: selectedVariant.variant_id, // Use the actual variant_id
      name: active.name,
      qty,
      price: selectedVariant.price,
      size: selectedVariant.size,
      color: selectedVariant.color,
      imgPath: active.img || "/default.png",
    });
  };

  if (!open) return null;

  return (
    <div
      className="fixed inset-0 z-50 bg-gradient-to-br from-slate-900/50 via-blue-900/50 to-indigo-900/50 backdrop-blur-md flex items-end md:items-center justify-center p-0 overscroll-contain text-black animate-in fade-in duration-300"
      onClick={onClose}
      role="dialog"
      aria-modal="true"
    >
      <div
        className="
          w-full max-w-6xl bg-white/98 backdrop-blur-xl
          h-[92dvh] md:h-auto md:max-h-[92vh]
          rounded-t-[2rem] md:rounded-[2rem]
          shadow-2xl border border-white/30 flex flex-col overflow-hidden
          animate-in slide-in-from-bottom md:slide-in-from-bottom-4 duration-400 ease-out
        "
        onClick={(e) => e.stopPropagation()}
      >
        {/* Enhanced Header */}
        <div className="relative p-6 border-b border-gray-200/50 shrink-0 bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="w-10 h-10 rounded-2xl bg-gradient-to-br from-blue-500 via-indigo-600 to-purple-600 flex items-center justify-center shadow-lg">
                <svg
                  className="w-5 h-5 text-white"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"
                  />
                </svg>
              </div>
              <div>
                <h2 className="text-xl font-bold text-gray-900 tracking-tight">
                  –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —Å–æ–Ω–≥–æ—Ö
                </h2>
                <p className="text-sm text-gray-600 mt-0.5">
                  –î—ç–ª–≥“Ø“Ø—Ä—ç—ç—Å –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —Ö–∞–π–∂, —Å–∞–≥—Å–∞–Ω–¥ –Ω—ç–º—ç—Ö
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="group w-10 h-10 rounded-xl bg-white/80 hover:bg-white border border-gray-200/50 hover:border-gray-300 flex items-center justify-center transition-all duration-200 hover:shadow-md"
            >
              <svg
                className="w-5 h-5 text-gray-600 group-hover:text-gray-800 transition-colors"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>
          
          {/* Subtle gradient overlay */}
          <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 to-purple-500/5 rounded-t-[2rem] pointer-events-none"></div>
        </div>

        {/* Scrollable content */}
        <div className="flex-1 overflow-y-auto p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* LEFT - Product List */}
            <div className="bg-white/70 backdrop-blur-md border border-white/50 rounded-3xl overflow-hidden flex flex-col h-full shadow-xl">
              <div className="p-6 border-b border-gray-200/30 shrink-0 bg-gradient-to-r from-white/50 to-blue-50/50">
                {/* Enhanced Search Input */}
                <div className="relative group">
                  <input
                    className="h-14 w-full border-2 border-gray-200/60 rounded-2xl px-6 pl-14 focus:border-blue-400 focus:ring-4 focus:ring-blue-100 transition-all duration-300 bg-white/80 backdrop-blur-sm shadow-sm text-gray-800 placeholder-gray-500 font-medium"
                    placeholder="–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —Ö–∞–π—Ö..."
                    value={query}
                    onChange={(e) => setQuery(e.target.value)}
                  />
                  <div className="absolute left-4 top-1/2 transform -translate-y-1/2 w-6 h-6 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
                    <svg
                      className="w-4 h-4 text-white"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2.5}
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                      />
                    </svg>
                  </div>
                  {query && (
                    <button
                      onClick={() => setQuery("")}
                      className="absolute right-4 top-1/2 transform -translate-y-1/2 w-6 h-6 bg-gray-200 hover:bg-gray-300 rounded-full flex items-center justify-center transition-colors"
                    >
                      <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  )}
                </div>
                {/* Enhanced Category Filter */}
                <div className="mt-6">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
                        <svg
                          className="w-4 h-4 text-white"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M19 11H5m14-7l-7 7 7 7M5 4l7 7-7 7"
                          />
                        </svg>
                      </div>
                      <div className="flex flex-col">
                        <span className="text-sm font-bold text-gray-800">–ê–Ω–≥–∏–ª–∞–ª</span>
                        <span className="text-xs text-gray-500">–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —à“Ø“Ø—Ö</span>
                      </div>
                      {selectedCat && (
                        <span className="px-3 py-1.5 bg-gradient-to-r from-blue-500 to-indigo-600 text-white text-xs rounded-full font-bold shadow-md animate-in slide-in-from-left duration-300">
                          {selectedCat.name}
                        </span>
                      )}
                    </div>
                    {selectedCat && (
                      <button
                        onClick={() => setSelectedCat(null)}
                        className="group flex items-center gap-2 text-xs text-blue-600 hover:text-blue-800 bg-blue-50 hover:bg-blue-100 px-3 py-2 rounded-xl transition-all duration-200 hover:shadow-md border border-blue-200/50"
                      >
                        <svg
                          className="w-3 h-3 group-hover:rotate-90 transition-transform duration-200"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M6 18L18 6M6 6l12 12"
                          />
                        </svg>
                        –ë“Ø–≥–¥–∏–π–≥ —Ö–∞—Ä–∞—Ö
                      </button>
                    )}
                  </div>
                  <div className="max-h-48 overflow-y-auto bg-gradient-to-br from-gray-50 via-blue-50/50 to-purple-50/50 rounded-2xl border border-gray-200/60 shadow-inner backdrop-blur-sm">
                    {categories.length === 0 ? (
                      <div className="flex items-center justify-center p-8">
                        <div className="text-center">
                          <div className="relative">
                            <div className="animate-spin rounded-full h-8 w-8 border-2 border-blue-200 border-t-blue-600 mx-auto mb-3"></div>
                            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-400/20 to-purple-400/20 animate-pulse"></div>
                          </div>
                          <div className="text-sm text-gray-600 font-medium">
                            –ê–Ω–≥–∏–ª–∞–ª –∞—á–∞–∞–ª–∂ –±–∞–π–Ω–∞...
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="p-4 space-y-1">
                        {!selectedCat && (
                          <button
                            onClick={() => setSelectedCat(null)}
                            className="w-full text-left px-4 py-3 text-sm font-semibold text-gray-700 hover:bg-white/80 hover:text-blue-600 rounded-xl transition-all duration-200 flex items-center gap-3 bg-white/60 border border-white/50 shadow-sm"
                          >
                            <div className="w-6 h-6 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
                              <svg
                                className="w-3 h-3 text-white"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M19 11H5m14-7l-7 7 7 7M5 4l7 7-7 7"
                                />
                              </svg>
                            </div>
                            –ë“Ø—Ö –∞–Ω–≥–∏–ª–∞–ª
                          </button>
                        )}
                        <CategoryTree
                          nodes={categories}
                          onSelect={(cat) => setSelectedCat(cat)}
                          selectedId={selectedCat?.id}
                        />
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Enhanced Product List */}
              <div className="flex-1 overflow-auto bg-gradient-to-b from-white/50 to-gray-50/50">
                {loading ? (
                  <div className="flex items-center justify-center h-64">
                    <div className="text-center">
                      <div className="relative">
                        <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-200 border-t-blue-600 mx-auto mb-6"></div>
                        <div className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-400/20 to-purple-400/20 animate-pulse"></div>
                      </div>
                      <p className="text-gray-700 font-semibold text-lg mb-2">
                        –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –∞—á–∞–∞–ª–∂ –±–∞–π–Ω–∞...
                      </p>
                      <p className="text-gray-500 text-sm">
                        –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø
                      </p>
                    </div>
                  </div>
                ) : catalog.length === 0 ? (
                  <div className="flex items-center justify-center h-64">
                    <div className="text-center bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50 shadow-lg">
                      <div className="w-16 h-16 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl flex items-center justify-center mx-auto mb-4">
                        <svg
                          className="w-8 h-8 text-gray-400"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={1.5}
                            d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-3.5m-9 0h3.5m0 0v1.5M12 14l3-3-3-3m-5 3h8"
                          />
                        </svg>
                      </div>
                      <p className="text-gray-700 font-bold text-lg mb-2">
                        –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π
                      </p>
                      <p className="text-sm text-gray-500 max-w-xs">
                        –î—ç–ª–≥“Ø“Ø—Ä—Ç –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –±–∞–π—Ö–≥“Ø–π —ç—Å–≤—ç–ª API —Ö–æ–ª–±–æ–ª—Ç –∞–ª–¥–∞–∞—Ç–∞–π –±–∞–π–∂ –±–æ–ª–∑–æ—à–≥“Ø–π
                      </p>
                    </div>
                  </div>
                ) : (
                  <div className="overflow-hidden">
                    <div className="bg-white/80 backdrop-blur-sm border-b border-gray-200/60 sticky top-0 z-10">
                      <div className="px-6 py-4 bg-gradient-to-r from-blue-50/50 to-indigo-50/50">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <div className="w-6 h-6 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
                              <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14-7l-7 7 7 7M5 4l7 7-7 7" />
                              </svg>
                            </div>
                            <h3 className="font-bold text-gray-800">–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω</h3>
                            <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full font-bold">
                              {filtered.length}
                            </span>
                          </div>
                          <div className="text-xs text-gray-500 font-medium">
                            –°–æ–Ω–≥–æ—Ö—ã–Ω —Ç—É–ª–¥ –¥–∞—Ä–Ω–∞ —É—É
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="p-3 space-y-2">
                      {filtered.map((p) => {
                        const totalStock = p.variants.reduce((s, v) => s + v.stock, 0);
                        const activeRow = p.id === active?.id;
                        return (
                          <div
                            key={p.id}
                            className={`group relative cursor-pointer transition-all duration-300 rounded-2xl border ${
                              activeRow
                                ? "bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-300 shadow-lg scale-[1.02]"
                                : "bg-white/60 border-gray-200/60 hover:bg-white hover:border-blue-200 hover:shadow-md"
                            }`}
                            onClick={() => selectProduct(p.id)}
                          >
                            <div className="p-4 flex items-center justify-between">
                              <div className="flex items-center gap-4 flex-1 min-w-0">
                                <div className={`relative w-12 h-12 rounded-xl overflow-hidden ${
                                  activeRow 
                                    ? "bg-gradient-to-br from-blue-100 to-indigo-200" 
                                    : "bg-gradient-to-br from-gray-100 to-gray-200"
                                }`}>
                                  {p.img && p.img !== "/default.png" ? (
                                    <Image
                                      src={p.img}
                                      alt={p.name}
                                      width={48}
                                      height={48}
                                      className="w-full h-full object-cover"
                                    />
                                  ) : (
                                    <div className="w-full h-full flex items-center justify-center">
                                      <svg
                                        className={`w-6 h-6 ${activeRow ? "text-blue-600" : "text-gray-500"}`}
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          strokeLinecap="round"
                                          strokeLinejoin="round"
                                          strokeWidth={2}
                                          d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                                        />
                                      </svg>
                                    </div>
                                  )}
                                  
                                  {/* Active indicator */}
                                  {activeRow && (
                                    <div className="absolute top-1 right-1 w-3 h-3 bg-blue-500 rounded-full flex items-center justify-center">
                                      <svg className="w-2 h-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                                      </svg>
                                    </div>
                                  )}
                                </div>
                                
                                <div className="flex-1 min-w-0">
                                  <h4 className={`font-semibold truncate ${activeRow ? "text-blue-900" : "text-gray-900"}`}>
                                    {p.name}
                                  </h4>
                                  <p className="text-sm text-gray-500 truncate mt-0.5">
                                    {p.category || "–ê–Ω–≥–∏–ª–∞–ª —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"}
                                  </p>
                                </div>
                              </div>
                              
                              <div className="flex items-center gap-3">
                                <div className={`px-3 py-1.5 rounded-xl text-sm font-bold ${
                                  totalStock > 0
                                    ? "bg-green-100 text-green-800 border border-green-200"
                                    : "bg-red-100 text-red-800 border border-red-200"
                                }`}>
                                  {totalStock} —à
                                </div>
                                
                                <div className={`w-8 h-8 rounded-lg flex items-center justify-center transition-colors ${
                                  activeRow 
                                    ? "bg-blue-500 text-white" 
                                    : "bg-gray-100 text-gray-400 group-hover:bg-blue-100 group-hover:text-blue-500"
                                }`}>
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                  </svg>
                                </div>
                              </div>
                            </div>
                            
                            {/* Hover effect border */}
                            <div className={`absolute inset-0 rounded-2xl transition-opacity ${
                              activeRow 
                                ? "bg-gradient-to-r from-blue-400/10 to-indigo-400/10" 
                                : "opacity-0 group-hover:opacity-100 bg-gradient-to-r from-blue-400/5 to-indigo-400/5"
                            }`}></div>
                          </div>
                        );
                      })}
                      
                      {filtered.length === 0 && (
                        <div className="flex flex-col items-center justify-center py-16 text-center">
                          <div className="w-16 h-16 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl flex items-center justify-center mb-4">
                            <svg
                              className="w-8 h-8 text-gray-400"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={1.5}
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                              />
                            </svg>
                          </div>
                          <h3 className="text-gray-700 font-bold text-lg mb-2">–ò–ª—ç—Ä—Ü –æ–ª–¥—Å–æ–Ω–≥“Ø–π</h3>
                          <p className="text-gray-500 text-sm max-w-xs">
                            {query 
                              ? "–•–∞–π–ª—Ç—ã–Ω “Ø—Ä –¥“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π. ”®”©—Ä —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ –∞—à–∏–≥–ª–∞–Ω–∞ —É—É." 
                              : selectedCat 
                                ? "–≠–Ω—ç –∞–Ω–≥–∏–ª–ª—ã–Ω –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π." 
                                : "–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞."
                            }
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>

              <div className="p-4 shrink-0 flex justify-center">
                <button
                  type="button"
                  className="relative w-14 h-14 rounded-2xl bg-gradient-to-r from-blue-500 to-indigo-600 shadow-lg flex items-center justify-center hover:shadow-xl hover:scale-105 transition-all duration-200"
                  title="–°–∞–≥—Å"
                >
                  <FaShoppingCart className="w-6 h-6 text-white" />
                  <span className="absolute -top-2 -right-2 w-6 h-6 text-xs rounded-full bg-red-500 text-white flex items-center justify-center font-bold shadow-lg">
                    1
                  </span>
                </button>
              </div>
            </div>

            {/* RIGHT - Product Details */}
            <div className="bg-white/70 backdrop-blur-md border border-white/50 rounded-3xl overflow-hidden flex flex-col h-full shadow-xl">
              {/* Product Header */}
              <div className="relative p-6 border-b border-gray-200/30 shrink-0 bg-gradient-to-r from-white/60 to-blue-50/60">
                {active ? (
                  <div className="flex items-start gap-6">
                    {/* Enhanced Product Image */}
                    <div className="relative group">
                      <div className="w-24 h-24 rounded-3xl bg-gradient-to-br from-gray-100 via-white to-gray-50 flex items-center justify-center overflow-hidden shadow-lg border-2 border-white/80">
                        {active.img && active.img !== "/default.png" ? (
                          <Image
                            src={active.img}
                            alt={active.name}
                            className="object-cover w-full h-full transition-transform duration-300 group-hover:scale-110"
                            width={96}
                            height={96}
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
                            <svg
                              className="w-10 h-10 text-blue-400"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={1.5}
                                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                              />
                            </svg>
                          </div>
                        )}
                      </div>
                      
                      {/* Stock status indicator */}
                      <div className="absolute -bottom-2 -right-2">
                        <div className={`px-2 py-1 rounded-full text-xs font-bold shadow-lg border-2 border-white ${
                          (active.variants.reduce((s, v) => s + v.stock, 0)) > 0
                            ? "bg-green-500 text-white"
                            : "bg-red-500 text-white"
                        }`}>
                          {active.variants.reduce((s, v) => s + v.stock, 0)} —à
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between gap-4">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-bold text-xl text-gray-900 mb-2 leading-tight">
                            {active.name}
                          </h3>
                          
                          <div className="flex flex-wrap items-center gap-3 mb-3">
                            <div className="flex items-center gap-2">
                              <div className="w-5 h-5 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                </svg>
                              </div>
                              <span className="text-sm text-gray-600 font-medium">
                                {active.category || "–ê–Ω–≥–∏–ª–∞–ª —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"}
                              </span>
                            </div>
                            
                            <div className="flex items-center gap-2">
                              <div className="w-5 h-5 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                                </svg>
                              </div>
                              <span className="text-sm text-gray-600 font-medium">
                                {active.variants.length} —Ö—É–≤–∏–ª–±–∞—Ä
                              </span>
                            </div>
                          </div>
                          
                          {selectedVariant && (
                            <div className="inline-flex items-center gap-2 px-3 py-2 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl">
                              <div className="w-4 h-4 bg-green-500 rounded-full flex items-center justify-center">
                                <svg className="w-2 h-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                                </svg>
                              </div>
                              <span className="text-sm font-bold text-green-800">
                                {selectedVariant.price.toLocaleString()}‚ÇÆ
                              </span>
                            </div>
                          )}
                        </div>
                        
                        <button
                          type="button"
                          className="group w-10 h-10 rounded-xl bg-gradient-to-r from-red-50 to-pink-50 border border-red-100 hover:from-red-100 hover:to-pink-100 hover:border-red-200 flex items-center justify-center transition-all duration-200 hover:shadow-md"
                          title="–î—É—Ä—Ç–∞–π –±–æ–ª–≥–æ—Ö"
                        >
                          <FiHeart className="w-5 h-5 text-red-400 group-hover:text-red-600 transition-colors" />
                        </button>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="w-16 h-16 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl flex items-center justify-center mx-auto mb-4">
                      <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                      </svg>
                    </div>
                    <p className="text-gray-600 font-medium">–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —Å–æ–Ω–≥–æ–Ω–æ —É—É</p>
                  </div>
                )}
                
                {/* Subtle gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 to-purple-500/5 rounded-t-3xl pointer-events-none"></div>
              </div>

              {/* Enhanced Color Selection */}
              {active && colors.length > 0 && (
                <div className="p-6 border-b border-gray-200/30 shrink-0 bg-gradient-to-r from-white/40 to-purple-50/40">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
                      <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM7 3H5a2 2 0 00-2 2v12a4 4 0 004 4h2M9 3h4a2 2 0 012 2v12a4 4 0 01-2 2H9M15 3h2a2 2 0 012 2v12a4 4 0 01-4 4h-2" />
                      </svg>
                    </div>
                    <div>
                      <h4 className="text-sm font-bold text-gray-800">”®–Ω–≥”© —Å–æ–Ω–≥–æ—Ö</h4>
                      <p className="text-xs text-gray-500">–•“Ø—Å—Å—ç–Ω ”©–Ω–≥”©”© —Å–æ–Ω–≥–æ–Ω–æ —É—É</p>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-3">
                    {colors.map((c) => {
                      const activeChip = selColor === c;
                      const variantCount = active?.variants.filter(v => v.color === c).length || 0;
                      const totalStock = active?.variants.filter(v => v.color === c).reduce((s, v) => s + v.stock, 0) || 0;
                      
                      return (
                        <button
                          type="button"
                          key={c}
                          onClick={() => setSelColor(c)}
                          className={`group relative p-4 rounded-2xl text-sm font-semibold transition-all duration-300 border-2 ${
                            activeChip
                              ? "bg-gradient-to-r from-purple-500 via-pink-500 to-red-500 text-white shadow-xl scale-105 border-purple-300"
                              : "bg-white/80 text-gray-700 hover:bg-white hover:shadow-lg border-gray-200/60 hover:border-purple-200"
                          }`}
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className={`w-6 h-6 rounded-full border-2 ${
                                activeChip ? "border-white/50" : "border-gray-300"
                              }`} style={{
                                backgroundColor: c.toLowerCase().includes('–Ω–æ–≥–æ–æ–Ω') ? '#10b981' :
                                               c.toLowerCase().includes('—É–ª–∞–∞–Ω') ? '#ef4444' :
                                               c.toLowerCase().includes('—Ü—ç–Ω—Ö—ç—Ä') ? '#3b82f6' :
                                               c.toLowerCase().includes('—à–∞—Ä') ? '#f59e0b' :
                                               c.toLowerCase().includes('—Ö–∞—Ä') ? '#1f2937' :
                                               c.toLowerCase().includes('—Ü–∞–≥–∞–∞–Ω') ? '#ffffff' : '#6b7280'
                              }}></div>
                              <span className="truncate">{c}</span>
                            </div>
                            <div className="text-right">
                              <div className={`text-xs font-medium ${activeChip ? "text-white/80" : "text-gray-500"}`}>
                                {totalStock} —à
                              </div>
                            </div>
                          </div>
                          
                          {activeChip && (
                            <div className="absolute inset-0 bg-gradient-to-r from-white/10 to-white/5 rounded-2xl"></div>
                          )}
                        </button>
                      );
                    })}
                  </div>
                </div>
              )}

              {/* Enhanced Size Selection */}
              {active && sizes.length > 0 && (
                <div className="p-6 border-b border-gray-200/30 shrink-0 bg-gradient-to-r from-white/40 to-blue-50/40">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center">
                      <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4a1 1 0 011-1h4m0 0V1m0 2h2M9 1v2h2m0 0V1m0 2h2m0 0V1m0 2h2m0 0V1m0 2h4a1 1 0 011 1v4M3 12h18M3 16h18m-9-8v8" />
                      </svg>
                    </div>
                    <div>
                      <h4 className="text-sm font-bold text-gray-800">–•—ç–º–∂—ç—ç —Å–æ–Ω–≥–æ—Ö</h4>
                      <p className="text-xs text-gray-500">–¢–æ—Ö–∏—Ä–æ—Ö —Ö—ç–º–∂—ç—ç–≥ —Å–æ–Ω–≥–æ–Ω–æ —É—É</p>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-3">
                    {sizes.map((s) => {
                      const v = active?.variants.find(
                        (v) => v.size === s && (!selColor || v.color === selColor)
                      );
                      const disabled = !v || v.stock <= 0;
                      const activeChip = selSize === s;
                      
                      return (
                        <button
                          type="button"
                          key={s}
                          onClick={() => !disabled && setSelSize(s)}
                          disabled={disabled}
                          className={`group relative p-4 rounded-2xl text-sm font-bold transition-all duration-300 border-2 ${
                            disabled
                              ? "bg-gray-50 text-gray-300 border-gray-100 cursor-not-allowed opacity-50"
                              : activeChip
                                ? "bg-gradient-to-r from-blue-500 to-indigo-600 text-white shadow-xl scale-105 border-blue-300"
                                : "bg-white/80 text-gray-700 hover:bg-white hover:shadow-lg border-gray-200/60 hover:border-blue-200"
                          }`}
                        >
                          <div className="text-center">
                            <div className="text-lg font-bold mb-1">{s}</div>
                            {v && (
                              <div className={`text-xs ${
                                activeChip ? "text-white/80" : 
                                disabled ? "text-gray-300" : "text-gray-500"
                              }`}>
                                {v.stock} —à
                              </div>
                            )}
                          </div>
                          
                          {activeChip && !disabled && (
                            <div className="absolute top-2 right-2 w-4 h-4 bg-white/20 rounded-full flex items-center justify-center">
                              <svg className="w-2 h-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                              </svg>
                            </div>
                          )}
                          
                          {disabled && (
                            <div className="absolute inset-0 flex items-center justify-center">
                              <svg className="w-6 h-6 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728" />
                              </svg>
                            </div>
                          )}
                        </button>
                      );
                    })}
                  </div>
                </div>
              )}

              {/* Empty state for no variants */}
              {active && colors.length === 0 && sizes.length === 0 && (
                <div className="p-6 border-b border-gray-200/30 shrink-0">
                  <div className="text-center py-8 bg-gray-50/50 rounded-2xl border border-gray-100">
                    <div className="w-12 h-12 bg-gray-200 rounded-xl flex items-center justify-center mx-auto mb-3">
                      <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
                      </svg>
                    </div>
                    <p className="text-sm text-gray-500 font-medium">
                      –≠–Ω—ç –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–¥ —Ö—É–≤–∏–ª–±–∞—Ä –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞
                    </p>
                  </div>
                </div>
              )}
              </div>

              <div className="p-6 border-b border-gray-200/50 shrink-0">
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-4">
                  <div className="text-sm font-semibold text-gray-900 mb-2">
                    –°–æ–Ω–≥–æ—Å–æ–Ω —Ö—É–≤–∏–ª–±–∞—Ä:
                  </div>
                  <div className="font-medium text-gray-800">
                    {selColor && selSize
                      ? `${selColor} / ${selSize}`
                      : "”®–Ω–≥”© –±–æ–ª–æ–Ω —Ö—ç–º–∂—ç—ç —Å–æ–Ω–≥–æ–Ω–æ —É—É"}
                  </div>
                  {selectedVariant && (
                    <div className="mt-3 flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-green-500"></div>
                      <span className="text-sm text-green-700 font-medium">
                        –ë–æ–ª–æ–º–∂–∏—Ç: {remaining} —à–∏—Ä—Ö—ç–≥
                      </span>
                    </div>
                  )}
                </div>
              </div>

              {/* optional scrollable middle segment */}
              <div className="flex-1 overflow-y-auto p-6">
                {/* —ç–Ω–¥ —Ö“Ø—Å–≤—ç–ª —É—Ä—Ç —Ç–∞–π–ª–±–∞—Ä/metadata –±–∞–π—Ä–ª—É—É–ª–∂ –±–æ–ª–Ω–æ */}
              </div>

              {/* Enhanced Quantity and Action Section */}
              <div className="p-6 shrink-0 bg-gradient-to-br from-white/80 via-blue-50/30 to-indigo-50/30 border-t border-gray-200/50">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-600 rounded-xl flex items-center justify-center">
                      <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 4V2a1 1 0 011-1h4a1 1 0 011 1v2M7 4h6M7 4L5.5 6M13 4l1.5 2M5.5 6h9M5.5 6L4 8.5M14.5 6L16 8.5M4 8.5V19a2 2 0 002 2h8a2 2 0 002-2V8.5" />
                      </svg>
                    </div>
                    <div>
                      <h4 className="text-sm font-bold text-gray-800">–¢–æ–æ —à–∏—Ä—Ö—ç–≥</h4>
                      <p className="text-xs text-gray-500">–•—ç–¥—ç–Ω —à–∏—Ä—Ö—ç–≥ –∞–≤–∞—Ö –≤—ç?</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2 bg-white rounded-2xl p-2 shadow-lg border border-gray-200/60">
                    <button
                      type="button"
                      className="w-12 h-12 rounded-xl bg-gradient-to-r from-red-50 to-pink-50 hover:from-red-100 hover:to-pink-100 border border-red-200 text-red-600 hover:text-red-700 flex items-center justify-center transition-all duration-200 hover:shadow-md disabled:opacity-50"
                      onClick={() => setQty((q) => Math.max(1, q - 1))}
                      disabled={qty <= 1}
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M20 12H4" />
                      </svg>
                    </button>
                    
                    <div className="min-w-16 px-4 py-2 text-center">
                      <div className="text-2xl font-bold text-gray-900">{qty}</div>
                      <div className="text-xs text-gray-500 font-medium">—à–∏—Ä—Ö—ç–≥</div>
                    </div>
                    
                    <button
                      type="button"
                      className="w-12 h-12 rounded-xl bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center transition-all duration-200 hover:shadow-md shadow-lg"
                      onClick={() => setQty((q) => Math.min(9999, q + 1))}
                      disabled={!selectedVariant || qty >= remaining}
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M12 4v16m8-8H4" />
                      </svg>
                    </button>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex gap-4">
                  <button
                    type="button"
                    onClick={onClose}
                    className="flex-1 h-14 px-6 rounded-2xl border-2 border-gray-200 bg-white text-gray-700 font-semibold hover:bg-gray-50 hover:border-gray-300 transition-all duration-200 flex items-center justify-center gap-2 shadow-sm hover:shadow-md"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    –ë–æ–ª–∏—Ö
                  </button>
                  
                  <button
                    type="button"
                    onClick={handleAdd}
                    disabled={!canAdd}
                    className={`flex-1 h-14 px-6 rounded-2xl font-bold transition-all duration-300 flex items-center justify-center gap-3 ${
                      !canAdd
                        ? "bg-gray-200 text-gray-400 cursor-not-allowed border-2 border-gray-200"
                        : "bg-gradient-to-r from-blue-500 via-indigo-600 to-purple-600 text-white hover:from-blue-600 hover:via-indigo-700 hover:to-purple-700 shadow-xl hover:shadow-2xl active:scale-95 border-2 border-blue-400"
                    }`}
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5M17 13v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6" />
                    </svg>
                    –°–∞–≥—Å–∞–Ω–¥ –Ω—ç–º—ç—Ö
                  </button>
                </div>

                {/* Selection Summary */}
                {canAdd && selColor && selSize && (
                  <div className="mt-6 p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-2xl border border-green-200 shadow-sm animate-in slide-in-from-bottom duration-300">
                    <div className="flex items-center gap-3 mb-2">
                      <div className="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                        <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                      <span className="font-bold text-green-800">–°–æ–Ω–≥–æ–ª—Ç –±—ç–ª—ç–Ω –±–æ–ª–ª–æ–æ</span>
                    </div>
                    <div className="text-sm text-green-700 leading-relaxed">
                      <div className="flex items-center gap-4 flex-wrap">
                        <span className="flex items-center gap-1">
                          <span className="font-semibold">{qty}</span>
                          <span>—à–∏—Ä—Ö—ç–≥</span>
                        </span>
                        <span className="flex items-center gap-1">
                          <span className="font-medium">–•—ç–º–∂—ç—ç:</span>
                          <span className="px-2 py-0.5 bg-green-100 rounded-full text-xs font-bold">{selSize}</span>
                        </span>
                        <span className="flex items-center gap-1">
                          <span className="font-medium">”®–Ω–≥”©:</span>
                          <span className="px-2 py-0.5 bg-green-100 rounded-full text-xs font-bold">{selColor}</span>
                        </span>
                        {selectedVariant && (
                          <span className="flex items-center gap-1">
                            <span className="font-medium">“Æ–Ω—ç:</span>
                            <span className="px-2 py-0.5 bg-green-200 text-green-800 rounded-full text-xs font-bold">
                              {selectedVariant.price.toLocaleString()}‚ÇÆ
                            </span>
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
